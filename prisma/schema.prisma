// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Student {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  Enroll            Enroll[]
  StudentProfile    StudentProfile[]
  StudentAssignment StudentAssignment[]
}

model StudentProfile {
  student      Student @relation(fields: [studentid], references: [id], onDelete: Cascade)
  studentid    Int     @id
  age          Int
  firstname    String
  lastname     String
  tel          String  @db.VarChar(15)
  preferredsub String
  description  String
  link         String
}

model InstructorProfile {
  instructor   Instructor @relation(fields: [instructorid], references: [id], onDelete: Cascade)
  instructorid Int        @id
  age          Int
  firstname    String
  lastname     String
  tel          String     @db.VarChar(15)
  preferredsub String
  description  String
  link         String
}

model Assignment {
  assignmentid     Int        @id @default(autoincrement())
  assignmentnumber Int //manully increase na

  course           Course     @relation(fields: [courseid], references: [id], onUpdate: Cascade)
  courseid         Int
  topic            String
  description      String
  fullscore        Int
  publishtime      DateTime
  duedate DateTime

  StudentAssignment StudentAssignment[]
}

model StudentAssignment {
  assignment   Assignment @relation(fields: [assignmentid], references: [assignmentid], onDelete: Cascade)
  assignmentid Int
  student      Student    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId    Int
  score        Int
  comment      String
  answer       String
  status       Int // not grading, not submit ??

  @@id([studentId, assignmentid])
}

model Instructor {
  id                Int                 @id @default(autoincrement())
  email             String              @unique
  name              String
  password          String
  courses           Course[]
  InstructorProfile InstructorProfile[]
 
}

model Enroll {
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId Int
  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  Int

  @@unique([studentId, courseId])
}

model Course {
  id           Int          @id @default(autoincrement())
  title        String       @unique
  description  String?
  Enroll       Enroll[]
  instructor   Instructor   @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId Int
  photo        Photo?
  photoId      Int?
  Assignment   Assignment[]
}

model Photo {
  id       Int     @id @default(autoincrement())
  filePath String
  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId Int?    @unique
}
